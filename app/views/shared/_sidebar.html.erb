<div class="w-64 bg-gray-100 min-h-screen p-4">
  <div class="mb-4">
    <div class="relative">
      <input type="search" placeholder="Search pages..." class="w-full px-3 py-2 border rounded text-sm" id="page-search">
      <div class="absolute inset-y-0 right-0 flex items-center pr-3">
        <svg class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
      </div>
    </div>
  </div>
  
  <div class="mb-4">
    <%= link_to new_page_path, class: "w-full flex items-center justify-center bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded" do %>
      <svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
      </svg>
      New Page
    <% end %>
  </div>
  
  <div class="pages-tree">
    <% accessible_pages = Current.user.accessible_pages.where(parent_page_id: nil).includes(:child_pages) rescue [] %>
    <% accessible_pages.each do |page| %>
      <%= render partial: 'shared/page_tree_item', locals: { page: page } %>
    <% end %>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Toggle children visibility
    document.querySelectorAll('.toggle-children').forEach(button => {
      button.addEventListener('click', function() {
        const children = this.closest('.page-item').querySelector('.children');
        children.classList.toggle('hidden');
        
        // Rotate arrow icon
        const svg = this.querySelector('svg');
        svg.classList.toggle('transform');
        svg.classList.toggle('rotate-180');
      });
    });
    
    // Page action menus
    document.querySelectorAll('[id^="page-menu-"]').forEach(button => {
      if (!button.id.includes('dropdown')) {
        button.addEventListener('click', function(e) {
          e.stopPropagation();
          const pageId = this.id.replace('page-menu-', '');
          const dropdown = document.getElementById(`page-menu-dropdown-${pageId}`);
          
          // Close all other dropdowns first
          document.querySelectorAll('[id^="page-menu-dropdown-"]').forEach(menu => {
            if (menu.id !== `page-menu-dropdown-${pageId}`) {
              menu.classList.add('hidden');
            }
          });
          
          dropdown.classList.toggle('hidden');
        });
      }
    });
    
    // Close dropdowns when clicking elsewhere
    document.addEventListener('click', function(e) {
      if (!e.target.closest('.page-actions')) {
        document.querySelectorAll('[id^="page-menu-dropdown-"]').forEach(menu => {
          menu.classList.add('hidden');
        });
      }
    });
    
    // Search functionality
    const searchInput = document.getElementById('page-search');
    searchInput.addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      document.querySelectorAll('.page-item').forEach(item => {
        const title = item.querySelector('a').textContent.toLowerCase();
        if (title.includes(searchTerm)) {
          item.style.display = '';
          // Show parent containers if they're hidden
          let parent = item.parentElement;
          while (parent && parent.classList.contains('children')) {
            parent.classList.remove('hidden');
            parent = parent.parentElement.parentElement;
          }
        } else {
          // Only hide if it doesn't have visible children
          const hasVisibleChildren = Array.from(item.querySelectorAll('.page-item'))
            .some(child => child.style.display !== 'none');
          
          if (!hasVisibleChildren) {
            item.style.display = 'none';
          }
        }
      });
    });
  });
</script> 